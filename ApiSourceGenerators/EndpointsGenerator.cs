using System.Collections.Immutable;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace ApiSourceGenerators;

[Generator]
public class EndpointsGenerator : IIncrementalGenerator
{
    private static readonly DiagnosticDescriptor MyDiagnostic = new DiagnosticDescriptor(
#pragma warning disable RS2008 // Enable analyzer release tracking
        id: "EG001",
#pragma warning restore RS2008 // Enable analyzer release tracking
        title: "Example Diagnostic",
        messageFormat: "Example diagnostic triggered in source generator",
        category: "EndpointsGenerator",
        DiagnosticSeverity.Warning,
        isEnabledByDefault: true);

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var provider = context.SyntaxProvider.CreateSyntaxProvider(
            (node, _) => node is ClassDeclarationSyntax,
            (syntaxContext, _) => (ClassDeclarationSyntax)syntaxContext.Node)
            .Where(x => x is not null);

        var compilation = context.CompilationProvider.Combine(provider.Collect());

        context.RegisterSourceOutput(compilation, Execute);
    }

    private void Execute(
        SourceProductionContext context,
        (Compilation Compilation, ImmutableArray<ClassDeclarationSyntax> Classes) tuple)
    {
        var (compilation, classes) = tuple;

        var prefixCode = """
            // <auto-generated />

            using MinimalApiSourceGenTest.Endpoints;

            namespace MinimalApiSourceGenTest;

            public static class EndpointsExtensions
            {
                public static IEndpointRouteBuilder MapAllEndpoints(this IEndpointRouteBuilder app)
                {
            """;

        var codeBuilder = new StringBuilder(prefixCode);

        foreach (var syntax in classes)
        {
            if (compilation.GetSemanticModel(syntax.SyntaxTree).GetDeclaredSymbol(syntax) is not INamedTypeSymbol symbol)
            {
                continue;
            }

            if (!symbol.AllInterfaces.Any(i => i.Name == "IEndpoint"))
            {
                continue;
            }

            codeBuilder.Append($"""
                    new {symbol.Name}().MapEndpoints(app);
                """);
        }

        var suffixCode = """
                    return app;
                }
            }
            """;

        codeBuilder.AppendLine(suffixCode);

        context.AddSource("EndpointsExtensions.g.cs", codeBuilder.ToString());
    }
}
